/**
 purpose:
 to automatically hook into the bootstrap html and shows/hides tabs.
 Works based registering the tabs 'hash' with the changeTab function.
 no onclick events needed.
**/
if (typeof toolkit==='undefined') toolkit={};
toolkit.tabs = (function(hash) {

    var $el = {
        tabContainer: $('section[data-function=tabs]'),
        tabs: $('section[data-function=tabs] li[role=tab]'),
        tabTargets: $('section[data-function=tabs] div[role=tabpanel]')
    };
    var vars = {
        rememberState : $el.tabContainer.attr('data-remember-state')==='true'
    };

    function bindEvents() {
        if (vars.rememberState){
            hash.register(getHashList(), changeTab);
            $(window).resize(function () {
                moveTabsIntoDropdown();
            });
        } else {
            $el.tabs.on('click', function(e){
                e.preventDefault();
                changeTab($(this).find('a').attr('href'));
            });
        }
    }

    function getHashList() {
        var arrHash = [];
        $el.tabs.each(function(){
            arrHash.push($(this).attr('aria-controls'));
        });
        return arrHash;
    }

    function changeTab(controlId){
        $el.tabTargets.add($el.tabs).removeClass("selected");
        $('#' + controlId + '-tab').add($("#" + controlId))
            .addClass('selected');
    }


    // this handles calculating how many tabs are allowed
    function moveTabsIntoDropdown() {
        if($el.tabContainer.width() <= 707) {

            $containerWidth = $el.tabContainer.width();
            $totalWidth = 0;
            $i = 0;
            var numberOfTabs = 1;

            $($el.tabs).each(function () {
                $totalWidth += ($(this).find('a span').innerWidth() + 30);
                // if $totalWidth is more than $containerWidth then break out
                console.log($totalWidth + " " + $containerWidth);
                if($totalWidth <= $containerWidth) {
                    $i++;
                } else if ($totalWidth > $containerWidth) {
                    numberOfTabs = $i;
                    return false;
                }
            });

            $('.dropdown-tab-select').css('visibility','visible');
            showMore(numberOfTabs, $totalWidth, $containerWidth);

        } else {

            $('.dropdown-tab-select').css('visibility','hidden');
            showMore();

        }
    }

    // this handles adding/removing tabs to the dropdown
    function showMore(num, total, container) {
        // if numberOfTabs is greater than the amount of tabs allowed, move them into the dropdown.
        if (num >= $('.tabs').children('li').length) {
            $('.tabs [id$=-tab]').each(function () {
                console.log($(this));
            });
        }
    }

    bindEvents();

    return {
        getHashList: getHashList,
        changeTab: changeTab
    };

}(toolkit.hashmanager));


if (typeof window.define === "function" && window.define.amd) {
    define('modules/tabs', ['utils/hashmanager'], function() {
        return toolkit.tabs;
    });
}