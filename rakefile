require 'aws-sdk'
require 'cgi'

def s3
  $s3 ||= AWS::S3.new(access_key_id: ENV["S3_ACCESS_KEY_ID"] , secret_access_key: ENV["S3_ACCESS_KEY"], region: 'eu-west-1')
end

def bucket
  $bucket ||=  s3.buckets['prod-sky-web-toolkit']
end

def latest_version_number
  $latest_version_number ||= File.open('app/_config.yml').read.match(/version:(.+)/)[1].strip
end

def version_already_exists?
  bucket.objects.any?{|obj|obj.key.include? latest_version_number}
end

def version_is_release_candidate?
  latest_version_number.include? 'rc-'
end

def is_feature_branch?
  branchName.include? 'feature'
end

def is_feature_version?
  latest_version_number.include? 'feature-'
end

def branchName
  `git branch | sed -n '/\* /s///p'`
end


def static_to_upload
  Dir.chdir("_site") do
    Dir.glob("static/**/*.*")
  end
end

def assets_to_upload
  ["stylesheets/toolkit.css",
    "fonts/skycons.css", "fonts/skycons.eot", "fonts/skycons.ttf",
    "scripts/toolkit.js", "scripts/toolkit.min.js",
    "images/icon.png"]
end

def templates_to_upload
  Dir.glob("_site/**/*.*")
end

def content_type(file)
    case File.extname(file)
      when '.svg'
        content_type = 'image/svg+xml'
      when '.eot'
        content_type = 'application/vnd.ms-fontobject'
      when '.ttf'
        content_type = 'font/ttf'
      when '.woff'
        content_type = 'application/x-font-woff'
      when '.map'
        content_type = 'text/javascript'
      when '.js'
        content_type = 'text/javascript'
      when '.css'
        content_type = 'text/css'
      when '.png'
        content_type = 'image/png'
      when '.html'
        content_type = 'text/html'
      else
        content_type = 'image/jpeg'
    end
    content_type
end

def emptyGitCache
  system "git rm --cached app/fonts/min -r"
  system "git rm --cached _site -r"
  system "git rm --cached dist -r"
end

def tagBuild

  puts "*** Tagging Version #{latest_version_number} ***"
  `git config --global user.email "dl-skycom@bskyb.com"`
  `git config --global user.name "Rake file"`
  system "git tag -a v#{latest_version_number} -m \"Rake deploy: auto tag on #{getDate}\""
  system "git push origin master v#{latest_version_number}"
end

def pushToAmazonS3
  puts "*** Pushing to the AmazonS3 ***"
  system "grunt"
  doc_resources = []
  puts 'Uploading dist files'
  Dir.chdir("_site/dist") do
    assets_to_upload.each do |file|
      puts "Uploading dist file: #{file}"
      doc_resources << bucket.objects["#{latest_version_number}/#{file}"].write(File.open(file).read, cache_control: 'public, max-age=2592000', content_type: content_type(file), acl: :public_read )
    end
  end
  puts 'Uploading _site files'
  templates_to_upload.each do |file|
    puts "Uploading _site file: #{file}"
    doc_resources << bucket.objects["#{latest_version_number}/#{file}"].write(File.open(file).read, cache_control: 'public, max-age=2592000', content_type: content_type(file), acl: :public_read )
  end
  puts 'Uploading static files'
  Dir.chdir("_site") do
    static_to_upload.each do |file|
      puts "Uploading static file: #{file}"
      doc_resources << bucket.objects["#{file}"].write(File.open(file).read, cache_control: 'public, max-age=2592000', content_type: content_type(file), acl: :public_read )
    end
  end
end




def fetchGHPages
  puts "*** Fecthing GH Pages ***"
  `git fetch origin gh-pages`
  `git checkout gh-pages`
  `git pull origin gh-pages`
  `git rebase master`
end

def updateGHPages
  puts "*** Pushing to github.io ***"
  system "git checkout gh-pages"
  system "git push origin master:gh-pages"
  system "git checkout master"
end


def updateBranch branch
  puts "*** push branch: #{branch} ***"
  system "git push origin HEAD:" + branch
end

def getDate
  `date +'%d-%m-%Y'`
end


desc 'Deploys a new version to the CDN and skyglobal.github.io/web-toolkit'
task :deploy do


  if is_feature_version?
    puts "*** version is a feature '#{latest_version_number}'.  Please commit in a 'feature-xxx' branch. ***"
    fail
  end
  if version_is_release_candidate?
    puts "*** version is a Release Candidate '#{latest_version_number}'.  Please commit in a 'rc-xxx' branch. ***"
    fail
  end

  if version_already_exists?
    puts "Version #{latest_version_number} exists so exiting."
    next
  end

  pushToAmazonS3
  fetchGHPages
  updateGHPages
  tagBuild
end



desc 'Deploys a new feature to the CDN'
task :deploy_feature do

  if !is_feature_version?
    puts "*** version is not a feature '#{latest_version_number}' ***"
    fail
  end

  updateBranch branchName

  if version_already_exists?
    puts "Version #{latest_version_number} exists so exiting."
    next
  end

  pushToAmazonS3

end


desc 'Deploys a release candidate to the CDN'
task :deploy_rc do

  if !version_is_release_candidate?
    puts "*** version is not a Release Candidate '#{latest_version_number}' ***"
    fail
  end

  updateBranch branchName

  if version_already_exists?
    puts "Version #{latest_version_number} exists so exiting."
    next
  end

  pushToAmazonS3

end
